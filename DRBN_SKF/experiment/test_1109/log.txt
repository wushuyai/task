DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

[Epoch 2]	Learning rate: 1.00e-4
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

[Epoch 2]	Learning rate: 1.00e-4

[Epoch 2]	Learning rate: 1.00e-4

[Epoch 2]	Learning rate: 1.00e-4

[Epoch 2]	Learning rate: 1.00e-4

[Epoch 2]	Learning rate: 1.00e-4
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

[Epoch 2]	Learning rate: 1.00e-4

[Epoch 2]	Learning rate: 1.00e-4

[Epoch 2]	Learning rate: 1.00e-4

[Epoch 2]	Learning rate: 1.00e-4

[Epoch 2]	Learning rate: 1.00e-4

[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

[Epoch 2]	Learning rate: 1.00e-4

[Epoch 2]	Learning rate: 1.00e-4

[Epoch 2]	Learning rate: 1.00e-4

[Epoch 2]	Learning rate: 1.00e-4

[Epoch 2]	Learning rate: 1.00e-4
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

[Epoch 2]	Learning rate: 1.00e-4

[Epoch 2]	Learning rate: 1.00e-4

[Epoch 2]	Learning rate: 1.00e-4

[Epoch 2]	Learning rate: 1.00e-4

[Epoch 2]	Learning rate: 1.00e-4

[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 1.68s

[Epoch 3]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 1.77s

[Epoch 4]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 1.73s

[Epoch 5]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 1.77s

[Epoch 6]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 1.67s

[Epoch 7]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 1.74s

[Epoch 8]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 1.79s

[Epoch 9]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 1.77s

[Epoch 10]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 1.77s

[Epoch 11]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 1.75s

[Epoch 12]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 1.88s

[Epoch 13]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 1.81s

[Epoch 14]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 2.15s

[Epoch 15]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 1.73s

[Epoch 16]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 1.80s

[Epoch 17]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 1.73s

[Epoch 18]	Learning rate: 1.00e-4
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 523.03s

[Epoch 3]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 58.97s

[Epoch 4]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 1.93s

[Epoch 3]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 1.98s

[Epoch 4]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 2.24s

[Epoch 5]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 1.99s

[Epoch 3]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 1.91s

[Epoch 4]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 1.95s

[Epoch 5]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 2.05s

[Epoch 6]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 2.15s

[Epoch 7]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 1.96s

[Epoch 8]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 2.00s

[Epoch 9]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 1.96s

[Epoch 10]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 0.000 (Best: 0.000 @epoch 1)
Total time: 1.83s

[Epoch 11]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 23.235 (Best: 23.235 @epoch 1)
Total time: 38.36s

[Epoch 3]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 23.235 (Best: 23.235 @epoch 1)
Total time: 34.75s

[Epoch 4]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 23.235 (Best: 23.235 @epoch 3)
Total time: 34.63s

[Epoch 5]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 23.235 (Best: 23.235 @epoch 3)
Total time: 34.46s

[Epoch 6]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 23.235 (Best: 23.235 @epoch 1)
Total time: 37.63s

[Epoch 3]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 23.235 (Best: 23.235 @epoch 1)
Total time: 35.41s

[Epoch 4]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 23.235 (Best: 23.235 @epoch 1)
Total time: 35.72s

[Epoch 5]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 23.235 (Best: 23.235 @epoch 1)
Total time: 35.05s

[Epoch 6]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 23.235 (Best: 23.235 @epoch 1)
Total time: 34.98s

[Epoch 7]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 23.235 (Best: 23.235 @epoch 1)
Total time: 35.31s

[Epoch 8]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 23.235 (Best: 23.235 @epoch 1)
Total time: 85.61s

[Epoch 9]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 23.235 (Best: 23.235 @epoch 1)
Total time: 34.48s

[Epoch 10]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 23.235 (Best: 23.235 @epoch 1)
Total time: 369.20s

[Epoch 3]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
DRBN(
  (recur1): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur2): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur3): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
  )
  (recur4): DRBN_BU(
    (SFENet1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (SFENet2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (RDBs): ModuleList(
      (0): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(48, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(64, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(80, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
      (5): RDB(
        (convs): Sequential(
          (0): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (1): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(24, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (2): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(32, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
          (3): RDB_Conv(
            (conv): Sequential(
              (0): Conv2d(40, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): ReLU()
            )
          )
        )
        (LFF): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (UPNet): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet2): Sequential(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (UPNet4): Sequential(
      (0): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (Down1): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Down2): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (Up1): ConvTranspose2d(16, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Up2): ConvTranspose2d(32, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (Relu): ReLU()
    (Img_up): Upsample(scale_factor=2.0, mode=bilinear)
    (fuseblk_1): TransformerBlock(
      (conv1): Conv2d(96, 32, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64, bias=False)
        (q): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(32, 170, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(170, 170, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=170, bias=False)
        (project_out): Conv2d(85, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_2): TransformerBlock(
      (conv1): Conv2d(48, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
    (fuseblk_3): TransformerBlock(
      (conv1): Conv2d(59, 16, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (attn): Attention(
        (kv): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (kv_dwconv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
        (q): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (q_dwconv): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (project_out): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (norm2): LayerNorm(
        (body): WithBias_LayerNorm()
      )
      (ffn): FeedForward(
        (gelu): GELU()
        (project_in): Conv2d(16, 84, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (dwconv): Conv2d(84, 84, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=84, bias=False)
        (project_out): Conv2d(42, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
    )
  )
)
[Epoch 2]	Learning rate: 1.00e-4

Evaluation:
[LowLightTest x4]	PSNR: 23.235 (Best: 23.235 @epoch 1)
Total time: 37.84s

[Epoch 3]	Learning rate: 1.00e-4

Evaluation:
